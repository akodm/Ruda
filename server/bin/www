#!/usr/bin/env node

/**
 * Module dependencies.
 */

let app = require('../app');
let debug = require('debug')('server:server');
let http = require('http');
let moment = require('moment');
// let redis = require('redis');
// let client = redis.createClient();
let configs = require('../server-configs');
const models = require("../models");

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || configs.app.port);
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

let socket = require('socket.io');
let io = socket(server);

/* ------------------------------- socket.io -------------------------------*/

io.sockets.on('connect', (socket) => {
  console.log(socket + ' 유저 접속');

  socket.on('sned', (data) => {
    console.log("전송한 메시지 : " + data.msg);
  });

  socket.on('disconnect', () => {
    console.log("접속 종료");
  });
});

/* ------------------------------------------------------------------------- */

/**
 * Listen on provided port, on all network interfaces.
 */
models.sequelize.query("SET FOREIGN_KEY_CHECKS = 0", {raw: true}).then(() => {
models.sequelize.sync({ force:true }).then(()=>{
    server.listen(port, async() => {
        console.log(`서버 시작 포트번호 :  ${port}`);
        try {
            console.log('[현재 시간 : ', moment(new Date()).format("M/D/ddd | HH시mm분]"));
        } catch(err){
            console.log("서버 시작 에러 / 데이터베이스 생성 에러 : " + err);
        }
    });
    server.on('error', onError);
    server.on('listening', onListening);
  });
});

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}